#
# Cloud specific configuration add-ons
#

# Additional pillar root for static cloud specific pillars
pillar_roots:
  prod:
    - /srv/pillar

# The configurable cloud specific pillars that are stored in the data base
# go up to 5 levels deeps.
ext_pillar:
  - mysql:
    - query: 'SELECT pillar,
                     value
                     FROM pillars WHERE
                       (LENGTH(pillar) - LENGTH(REPLACE(pillar, ":", "")) = 0) AND
                       (minion_id IS NULL OR minion_id = %s)'
      as_list: True
    # Query for second level pillar values (one dot in `pillar` key)
    - query: 'SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 1), ":", -1) AS key1,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 2), ":", -1) AS key2,
                     value
                     FROM pillars WHERE
                       (LENGTH(pillar) - LENGTH(REPLACE(pillar, ":", "")) = 1) AND
                       (minion_id IS NULL OR minion_id = %s)'
      as_list: True
    # Query for third level pillar values (two dots in `pillar` key)
    - query: 'SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 1), ":", -1) AS key1,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 2), ":", -1) AS key2,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 3), ":", -1) AS key3,
                     value
                     FROM pillars WHERE
                       (LENGTH(pillar) - LENGTH(REPLACE(pillar, ":", "")) = 2) AND
                       (minion_id IS NULL OR minion_id = %s)'
      as_list: True
    # Query for forth level pillar values (three dots in `pillar` key)
    - query: 'SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 1), ":", -1) AS key1,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 2), ":", -1) AS key2,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 3), ":", -1) AS key3,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 4), ":", -1) AS key4,
                     value
                     FROM pillars WHERE
                       (LENGTH(pillar) - LENGTH(REPLACE(pillar, ":", "")) = 3) AND
                       (minion_id IS NULL OR minion_id = %s)'
      as_list: True
    # Query for fifth level pillar values (four dots in `pillar` key)
    - query: 'SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 1), ":", -1) AS key1,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 2), ":", -1) AS key2,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 3), ":", -1) AS key3,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 4), ":", -1) AS key4,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 5), ":", -1) AS key5,
                     value
                     FROM pillars WHERE
                       (LENGTH(pillar) - LENGTH(REPLACE(pillar, ":", "")) = 4) AND
                       (minion_id IS NULL OR minion_id = %s)'
      as_list: True
    # Query for sixth level pillar values (four dots in `pillar` key)
    # This specificially queries the network_interfaces configuration for EC2,
    # which requires to be a list
    - query: 'SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 1), ":", -1) AS key1,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 2), ":", -1) AS key2,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 3), ":", -1) AS key3,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 4), ":", -1) AS key4,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 5), ":", -1) AS key5,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 6), ":", -1) AS key6,
                     value
                     FROM pillars WHERE
                       (LENGTH(pillar) - LENGTH(REPLACE(pillar, ":", "")) = 5) AND
                       (minion_id IS NULL OR minion_id = %s)'
      as_list: True
      with_lists: [4]
